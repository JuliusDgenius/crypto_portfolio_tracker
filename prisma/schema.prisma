// Updated Prisma Schema with Correct MongoDB ID Handling

// Generator and Data Source

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Models

model User {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  email             String           @unique
  password          String
  name              String?
  profilePicture    String?
  refreshTokenInvalidated Boolean    @default(false)
  verified          Boolean          @default(false)
  twoFactorEnabled  Boolean          @default(false)
  preferences       Json             // Stores currency, theme, notifications
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  refreshTokens      RefreshToken[]  @relation("UserToRefreshToken")
  portfolios        Portfolio[]      @relation("UserToPortfolio")
  watchlists        Watchlist[]      @relation("UserToWatchlist")
  exchangeAccounts  ExchangeAccount[] @relation("UserToExchangeAccount")
  alerts            Alert[]          @relation("UserToAlert")
}

model RefreshToken {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @db.ObjectId
  tokenHash String
  familyId  String
  createdAt DateTime
  expiresAt DateTime
  isRevoked Boolean  @default(false)
  user      User @relation("UserToRefreshToken", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([tokenHash])
  @@index([familyId])
}

model Portfolio {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  userId          String           @db.ObjectId
  name            String
  description     String?
  totalValue      Float
  profitLoss      Json             // Stores day, week, month, year, allTime
  lastUpdated     DateTime
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  user            User             @relation("UserToPortfolio", fields: [userId], references: [id], onDelete: Cascade)
  transactions    Transaction[]    @relation("PortfolioToTransaction")
  assets          Asset[]          @relation("PortfolioToAsset")
  historicalData  HistoricalData[] @relation("PortfolioToHistoricalData")
}

model Transaction {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  portfolioId     String           @db.ObjectId
  type            TransactionType
  cryptocurrency  String
  amount          Float
  pricePerUnit    Float
  fee             Float?
  exchange        String?
  wallet          String?
  notes           String?
  date            DateTime
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  portfolio       Portfolio        @relation("PortfolioToTransaction", fields: [portfolioId], references: [id], onDelete: Cascade)
  assetId         String           @db.ObjectId
  asset           Asset            @relation("AssetToTransaction", fields: [assetId], references: [id], onDelete: Cascade)
}

model Asset {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  portfolioId     String           @db.ObjectId
  symbol          String
  name            String
  quantity        Float
  averageBuyPrice Float
  currentPrice    Float
  value           Float
  profitLoss      Float
  allocation      Float             // Percentage of portfolio
  lastUpdated     DateTime
  portfolio       Portfolio         @relation("PortfolioToAsset", fields: [portfolioId], references: [id], onDelete: Cascade)
  transactions    Transaction[]     @relation("AssetToTransaction")
 
  // Back reference to Watchlist
  watchlists      Watchlist[]     @relation("WatchlistToAsset", fields: [watchlistIds], references: [id])
  watchlistIds    String[]        @db.ObjectId

  @@index([portfolioId, symbol])
}

model Watchlist {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  userId          String           @db.ObjectId
  name            String
  description     String?
  cryptocurrencies Json             // Array of crypto objects
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  user            User             @relation("UserToWatchlist", fields: [userId], references: [id], onDelete: Cascade)

  // Relationship with assets
  watchedAssets   Asset[]   @relation("WatchlistToAsset", fields: [assetIds], references: [id])
  assetIds        String[]  @db.ObjectId

  // Relationship with alerts
  alerts          Alert[]   @relation(fields: [alertIds], references: [id])
  alertIds        String[]  @db.ObjectId
}

model ExchangeAccount {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  userId          String           @db.ObjectId
  exchange        String
  name            String
  apiKey          String
  apiSecret       String
  isActive        Boolean          @default(true)
  lastSync        DateTime
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  user            User             @relation("UserToExchangeAccount", fields: [userId], references: [id], onDelete: Cascade)
}

model Alert {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  userId          String           @db.ObjectId
  type            AlertType
  status          AlertStatus
  conditions      Json             // Stores cryptocurrency, price, comparison, etc.
  notification    Json             // Stores email, push, sms flags
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  lastTriggered   DateTime?
  user            User             @relation("UserToAlert", fields: [userId], references: [id], onDelete: Cascade)

  // Relationship to watchlist
  watchlists      Watchlist[] @relation(fields: [watchlistIds], references: [id])
  watchlistIds    String[]    @db.ObjectId
}

model HistoricalData {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  portfolioId     String           @db.ObjectId
  date            DateTime
  totalValue      Float
  assets          Json             // Asset snapshots
  createdAt       DateTime         @default(now())
  portfolio       Portfolio        @relation("PortfolioToHistoricalData", fields: [portfolioId], references: [id], onDelete: Cascade)

  @@index([portfolioId, date])
}

enum TransactionType {
  BUY
  SELL
  TRANSFER_IN
  TRANSFER_OUT
}

enum AlertType {
  PRICE
  PORTFOLIO
  SYSTEM
}

enum AlertStatus {
  ACTIVE
  TRIGGERED
  DISABLED
}
